Events cube

The Events Cube provides comprehensive information about the events that are emitted in smart contracts whenever any activity occurs in the contract. Events Cube tracks all activities, such as new contract deployments, token transfers, deposits, withdrawals, and new pool creations. 

Filtering Events cube:

We extract the newly created pool on a specific Dex using the filters. For example, to retrieve newly created pools of the Uniswap v3 factory in the network, we use the Log SmartContract filter to specify “Uniswap v3" and then the Log Signature name filter to specify the “PoolCreated” event. This event is emitted whenever a new pool is created in Uniswap v3.

The event logs have an Arguments field that includes important details about the newly created pool, such as the first token address (token0), second token address (token1), and pool address (pool). 

Therefore, we include these arguments in the results to obtain comprehensive details about the newly created pool.  Use this link to run the following API:


“Uniswap v3” factory contract address (0x1f98431c8ad98523631ae4a59f267346ea31f984),

{
  EVM(dataset: combined, network: eth) {
    Events(
      orderBy: {descending: Block_Number}
      limit: {count: 10}
      where: {Log: {SmartContract: {is: "0x1f98431c8ad98523631ae4a59f267346ea31f984"}, Signature: {Name: {is: "PoolCreated"}}}, Block: {Date: {before: "2024-06-01"}}}
    ) {
      Log {
        Signature {
          Name
          Parsed
          Signature
        }
        SmartContract
      }
      Transaction {
        Hash
      }
      Block {
        Date
        Number
      }
      Arguments {
        Type
        Value {
          ... on EVM_ABI_Boolean_Value_Arg {
            bool
          }
          ... on EVM_ABI_Bytes_Value_Arg {
            hex
          }
          ... on EVM_ABI_BigInt_Value_Arg {
            bigInteger
          }
          ... on EVM_ABI_Address_Value_Arg {
            address
          }
          ... on EVM_ABI_String_Value_Arg {
            string
          }
          ... on EVM_ABI_Integer_Value_Arg {
            integer
          }
        }
        Name
      }
      Call {
        Signature {
          Name
        }
      }
    }
  }
}



In this example, we retrieve the newly created pools in the Uniswap v2 factory on the Ethereum network and run this API. In this API, we used the same filters as above. Moreover, the “PairCreated” event gets emitted when the pool is created in Uniswap v2. Therefore, we use the Log signature name filter to specify the “PairCreated” event and the Log smart contact filter to specify the “Uniswap v2 contract”. Use this link to run the API.

Uniswap v2 contract address: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f

{
  EVM(dataset: combined, network: eth) {
    Events(
      where: {Log: {SmartContract: {is: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"}, Signature: {Name: {is: "PairCreated"}}}}
      orderBy: {descending: Block_Time}
      limit: {count: 5}
    ) {
      Arguments {
        Index
        Name
        Type
        Value {
          ... on EVM_ABI_String_Value_Arg {
            string
          }
          ... on EVM_ABI_Address_Value_Arg {
            address
          }
          ... on EVM_ABI_BigInt_Value_Arg {
            bigInteger
          }
          ... on EVM_ABI_Integer_Value_Arg {
            integer
          }
        }
      }
      Block {
        Time
      }
      Log {
        Index
        Signature {
          Name
        }
      }
    }
  }
}




Next, we retrieve all the distinct events emitted by a specific smart contract in any network. We use the Log smart contract filter to specify the “smart contract”. Since we are interested in extracting distinct events, we use the limitBy clause with Log_Signature_Name and set its count to 1.

In the following example, we retrieve distinct events of the “Uniswap v3 factory contract” (0x1F984..). Use this link to run the following API. 




query MyQuery {
  EVM(dataset: combined, network: eth) {
    Events(
      limitBy: {by: Log_Signature_Name, count: 1}
      where: {Log: {SmartContract: {is: "0x1F98431c8aD98523631AE4a59f267346ea31F984"}}}
    ) {
      Log {
        Signature {
          Name
       
        }
      SmartContract
      }
    }
  }
}

In the above, we retrieve the events of specific contracts. If we want to retrieve all the events of a blockchain network, we use the same API as above by removing the Log smart contract filter (as we don't specify the specific smart contract).
 Run the following API using this link. 

query MyQuery {
  EVM(dataset: combined, network: eth) {
    Events(
      limitBy: {by: Log_Signature_Name, count: 1}
  
    ) {
      Log {
        Signature {
          Name
          Signature
        }
        SmartContract
      }
    }
  }
}


The above APIs retrieve events from a specific contract. If you are interested in retrieving events of multiple smart contracts, then use the  Log smart contract filter with the ‘in’ (‘in’ acts as an AND operator) operator to specify “multiple contracts” and Log signature name filter to specify the event name.  Then, we can retrieve all the event details from each specified smart contract.

For instance, we want to pull all events of Uniswap v3, Uniswap v2, and the USDT contract. We use the same API as above. Additionally, we use the Log smart contract filter in (AND operator) to specify all these district contracts.
Run the following API to understand it better.
query MyQuery {
  EVM(dataset: combined, network: eth) {
    Events(
      limitBy: {by: Log_Signature_Name, count: 1}
      where: {Log: 
        {SmartContract:
        {in: ["0x1F98431c8aD98523631AE4a59f267346ea31F984", 
        "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
        "0xdAC17F958D2ee523a2206206994597C13D831ec7"]}}}
    ) {
      Log {
        Signature {
          Name
          Signature
        }
        SmartContract
      }
      
    }
  }
}




The following API retrieves all the events from a specific block. Therefore, we use the Block Number filter to specify the “block number.” Use this link to run API. 

{
  EVM(dataset: combined, network: eth) {
    Events(limit: {count: 10}, 
      where: {Block: {Number: {eq: "19510768"}}}) {
      Block {
        Date
        Number
      }
      Call {
        Signature {
          Name
        }
      }
      Log {
        SmartContract
        Signature {
          Name
        }
      }
    }
  }
}


Metrics in Events Cube



In the following example, we retrieve the total number of addresses blacklisted by Ethereum.

Whenever the USDT contract blacklists any specific address, then the “AddedBlackList” event is emitted by the USDT contract. Therefore, we use the Log signature filter to specify the “AddedBlackList” event. Since we want the total number of addresses blacklisted by Ethereum. 

Thus, we use the count metric to retrieve the total number of times the “AddedBlackList” event is emitted by the USDT contract. Run the API using  this link. 

 USDT contract address: 0xdac17f958d2ee523a2206206994597c13d831ec7

query MyQuery {
  EVM(dataset: archive, network: eth) {
    Events(
      where: {Log: {Signature: {Name: {in:[ "AddedBlackList"]}}, SmartContract: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7
"}}}
     
    ) {
      count
     
    
    }
  }
}

